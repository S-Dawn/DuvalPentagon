package com.duval.utils;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import com.duval.datasource.DSController;
import com.duval.datasource.DSData;

public class Controller {

	private FaultController fc;;
	private DSController dc, dc1;
	
	private List<DSData> dataset;
	private Painter canvas;
	
	public Controller (String fileName) throws Exception {
		init(fileName);
	}
	
	public void init(String fileName) throws Exception {
		String newfileName = fileName + ".xlsx";
		this.fc = new FaultController();
		this.dc = new DSController(newfileName);		
		this.dataset = dc.readDS();
		newfileName = fileName + "_MOD.xlsx";
		this.dc1 = new DSController(newfileName);
		
	}
	
	public void predictFaults() throws Exception {
		Coordinates p;
		DSData data;
		Detector obj = new Detector(400, 200);
		for (int i=0; i<dataset.size(); i++) {
			data = dataset.get(i);
			p = fc.getFaultPoints(data);
			data.setPredictedFault(obj.FaultType(p));
		}
		dc1.writeDS(dataset);
	}
	
	public void createCanvas() throws Exception {
		this.canvas = new Painter(800,600,3);
    	canvas.show();
	}
	
	public void plotpoints() {
		Iterator<DSData> itr  = dataset.iterator();
		DSData obj;
		Coordinates p;
		while(itr.hasNext()) {
			obj = itr.next();
			p = fc.getFaultPoints(obj);
			canvas.addNewElement(p, obj.getFault());
		}
	}
	
	public void displayFaultpoints() {
		Iterator<DSData> itr  = dataset.iterator();
		DSData obj;
		Coordinates p;
		while(itr.hasNext()) {
			obj = itr.next();
			p = fc.getFaultPoints(obj);
			if(obj.isAmbiguous())
				canvas.addNewElement(p, obj.getFault());
		}
	}
	
	public void displayOkpoints() {
		Iterator<DSData> itr  = dataset.iterator();
		DSData obj;
		Coordinates p;
		while(itr.hasNext()) {
			obj = itr.next();
			p = fc.getFaultPoints(obj);
			if(!obj.isAmbiguous())
				canvas.addNewElement(p, obj.getFault());
		}
	}
	
	public void displayFault(String fault) {
		Iterator<DSData> itr  = dataset.iterator();
		DSData obj;
		Coordinates p;
		while(itr.hasNext()) {
			obj = itr.next();
			p = fc.getFaultPoints(obj);
			if(fault.equals(obj.getFault()))
				canvas.addNewElement(p, obj.getFault());
		}
	}
	
	public void displayPentagon(int row) throws IOException {
		DSData obj = dc1.readRow(row);
		Coordinates p = fc.getFaultPoints(obj);
		Coordinates coor[] = fc.getPentagonCoordinate();
		canvas.addNewElement(p, obj.getPredictedFault());
		canvas.drawpentagon(coor, obj.isAmbiguous());
	}
	
	public int countFaultPoints() {
		int i = 0;
		int count = 0;
		DSData obj = null;
		for(i=0, count = 0;i<dataset.size();i++) {
			obj = dataset.get(i);
			if(obj.isAmbiguous()) count++;
		}
		return count;
	}
}
